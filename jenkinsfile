pipeline{
    agent any //selection of agents
    //environment
     environment{
        SONAR_HOME = 'C:\\Users\\Administrator\\Documents\\tools\\sonarscanner\\sonar-scanner-7.1.0.4889-windows-x64\\bin'
        REPO_NAME = 'https://github.com/sinchana9999/html-sample-app-sinchana.git'
        BRANCH_NAME = 'master'
        SONAR_TOKEN = credentials('admintoken')
        DOCKER_CREDS = 'dockersinchana'
        SONAR_PROJECT_KEY = 'sinchanaapp'
        SONAR_SERVER_NAME = 'sinsonarqube' //name given for the sonarqube link in jenkins manage settings
    }
    stages{
        //stage 1
        stage('testing and verify required command'){
            steps{
                echo 'hello world'
                //bat or pwsh
                bat """
                %SONAR_HOME%\\sonar-scanner --version
                echo == checking docker ===>
                docker version
                echo == java version ===>
                java --version
                """
            }
        }

         //git checkout
        stage('takign code of github repo'){
            steps{
                echo 'cloning repo'
                echo 'messageeee'
                git url:"${REPO_NAME}", branch:"${BRANCH_NAME}"
            }
        }

        // doing sast with sonarqube
        stage('SAST with sonar-scanner'){
            steps {
                 echo 'wait for sonar-scanner to finish'
                 // calling plugin
                 script {
                    withSonarQubeEnv("${SONAR_SERVER_NAME}") {
               
                    bat """
                    %SONAR_HOME%\\sonar-scanner \
                    -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                    -Dsonar.sources=. \
                    -Dsonar.host.url=${SONAR_HOST_URL} \
                    -Dsonar.token=${SONAR_TOKEN}
                    """
 
                    }
                }
            }
        }

    // using docker plugins to build container image
        stage('building docker image'){
            steps{
                echo 'starting docker build process'
                script{
                    def imageName = "sinchana111/tanwebapp-iis-ltsc2022"
                    def imageTag = "codev1"
                    docker.build("${imageName}:${imageTag}",".")
                }
                //verify image build
                bat 'docker images | findstr tanwebapp'
            }
        }  

        //add stage to scan using trivy is no high , critical vlne then proceed else stop pipeline
        //  stage('Trivy Scan') {
        //     steps {
        //         echo 'Starting Trivy scan for vulnerabilities'
        //         script {
        //             def imageName = "tanwebapp-iis-ltsc2022"
        //             def imageTag = "codev1"
        //             def imageFullName = "${imageName}:${imageTag}"

        //             // Run Trivy scan and capture the output
        //             def trivyCommand = """trivy image --severity HIGH,CRITICAL --exit-code 1 --no-progress ${imageFullName}"""
        //             try {
        //                 bat trivyCommand
        //             } catch (Exception e) {
        //                 error "Trivy scan found vulnerabilities. Stopping the pipeline."
        //             }
        //         }
        //     }
        // }



        //pushing image to docker hub
        stage('Docker hub image push'){
            steps{
                echo 'Pushing image to docker hub'
                script{
                    def imageName = "sinchana111/tanwebapp-iis-ltsc2022"
                    def imageTag = "codev1"
                    def hubcreds = "${DOCKER_CREDS}"
                    docker.withRegistry('https://registry.hub.docker.com', hubcreds){
                        docker.image(imageName + ":" + imageTag).push()
                    }
 
                }
            }
        }
        
    }
}